<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="adm.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Arvo:ital,wght@0,400;0,700;1,400;1,700&display=swap"
        rel="stylesheet">

    <title>Manutenções finalizadas</title>
</head>

<body>
    <header>
        <img src="img/logo.png" alt="Logo">
    </header>

    <div class="title">
        Manutenções finalizadas
    </div>

    <div class="search-bar">
        <button class="back-button">
            <a href="/home_mecanico">  <img src="img/seta.png" alt="Voltar"></a>
        </button>
        <div class="search-input-container">
            <input type="text" placeholder="Buscar funcionário">
            <img src="img/lupa.png" alt="Pesquisar">
        </div>
    </div>
    <!--cabecalho acima-->
    <div class="container" id="manutencoes-container">
        </div>




    <script>
        // Simulação de dados do banco de dados
        const manutencoes = [
            { modelo: "Onix", marca: "Chevrolet", placa: "GAV09I0", cor: "Preto", status: "Finalizado" },
            { modelo: "Gol", marca: "Volkswagen", placa: "ABC1234", cor: "Branco", status: "Finalizado" },
            { modelo: "Gol", marca: "Volkswagen", placa: "ABC1234", cor: "Branco", status: "Finalizado" },
            { modelo: "Gol", marca: "Volkswagen", placa: "ABC1234", cor: "Branco", status: "Finalizado" },
            { modelo: "Gol", marca: "Volkswagen", placa: "ABC1234", cor: "Branco", status: "Finalizado" },
            { modelo: "Gol", marca: "Volkswagen", placa: "ABC1234", cor: "Branco", status: "Finalizado" }
            // Adicione mais manutenções aqui
        ];

        // Função para renderizar os cards de manutenções
        function renderizarManutencoes() {
            const manutencoesContainer = document.getElementById("manutencoes-container");
            manutencoesContainer.innerHTML = ""; // Limpa o conteúdo anterior

            manutencoes.forEach(manutencao => {
                const card = document.createElement("div");
                card.classList.add("card", "mb-3", "border-3");
                card.style.maxWidth = "18rem";

                const cardBody = document.createElement("div");
                cardBody.classList.add("card-body");

                // Define a cor da borda do card com base no status
                if (manutencao.status === "Finalizado") {
                    card.classList.add("border-success", "green"); // Adiciona classe "green" para o card verde
                    cardBody.classList.add("text-success");
                } else {
                    // Caso o status não seja "Finalizado", não adiciona nenhuma classe
                }

                const cardTitle = document.createElement("h3");
                cardTitle.classList.add("card-title");
                cardTitle.innerHTML = `<b>${manutencao.status}</b>`;

                const modelo = document.createElement("h5");
                modelo.classList.add("h5");
                modelo.innerHTML = `<b>Modelo:</b> ${manutencao.modelo}`;

                const marca = document.createElement("h5");
                marca.classList.add("h5");
                marca.innerHTML = `<b>Marca:</b> ${manutencao.marca}`;

                const placa = document.createElement("h5");
                placa.classList.add("h5");
                placa.innerHTML = `<b>Placa:</b> ${manutencao.placa}`;

                const cor = document.createElement("h5");
                cor.classList.add("h5");
                cor.innerHTML = `<b>Cor:</b> ${manutencao.cor}`;

                cardBody.appendChild(cardTitle);
                cardBody.appendChild(modelo);
                cardBody.appendChild(marca);
                cardBody.appendChild(placa);
                cardBody.appendChild(cor);

                card.appendChild(cardBody);
                manutencoesContainer.appendChild(card);
            });
        }

        // Chama a função para renderizar os cards ao carregar a página
        renderizarManutencoes();

        // Adicione um evento para atualizar os cards quando os dados do banco de dados forem alterados
        // Exemplo:
        // document.addEventListener("database-update", () => {
        //     renderizarManutencoes();
        // });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQS" crossorigin="anonymous"></script>

</body>
<style>* {
    margin: 0;
    padding: 0;
    font-family: 'Arvo', serif;
    /* Use a fonte Arvo */
}

header {
    background-color: #000000;
    color: white;
    padding: 8px;
    text-align: center;
    position: relative;
}

header img {
    width: 200px;
    height: auto;
}

.search-bar {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
    margin-top: 20px;
}

.search-bar .back-button {
    margin-right: 10px;
    background-color: transparent;
    border: none;
    cursor: pointer;
}

.search-bar .back-button img {
    width: 24px;
    height: 24px;
}

.search-bar .search-input-container {
    position: relative;
    width: 50%;
}

.search-bar input[type="text"] {
    width: 100%;
    padding: 10px 10px 10px 20px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 20px;
    outline: none;
}

.search-bar .search-input-container img {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.title {
    text-align: center;
    font-size: 24px;
    margin: 20px auto;
    color: #333;
    width: 80%;
    display: flex;
    justify-content: center;
}

/* Estilos dos cards */
.card {
    margin: 10px;
    cursor: pointer;
    /* Adiciona cursor de mão para indicar que é um botão */
    text-decoration: none;
    /* Remove o sublinhado padrão de links */
    color: inherit;
    /* Mantém a cor do texto do card */
    transition: transform 0.3s ease;
    /* Adiciona transição para a animação */
}

.card:hover {
    transform: scale(1.05);
    /* Aumenta o tamanho do card ao passar o mouse */
}

.card-body {
    padding: 20px;
}

.card-title {
    font-size: 1.5rem;
    margin-bottom: 10px;
}

.h5 {
    color: #000000;
}

/* Estilos para o container de cards */
.container {
    display: flex;
    flex-wrap: wrap; /* Permite que os cards quebrem para a próxima linha */
    justify-content: center; /* Centraliza os cards horizontalmente */
}

/* Estilos para os cards */
.card {
    flex: 0 0 300px; /* Ajusta a largura dos cards */
    margin: 10px;
    border-width: 3px;
}

/* Estilos para o título verde */
.card.green .card-title {
    font-size: 1.3rem;
    /* Reduz o tamanho do título */
}

/* Estilos para card verde */
.card.green {
    border-color: green;
}

.card.green .card-body {
    color: green;
}

/* Ajuste para responsividade */
@media (max-width: 768px) {
    .search-bar .search-input-container {
        width: 80%;
    }

    .card {
        flex: 0 0 90%; /* Ajusta a largura dos cards em dispositivos menores */
    }
}
</style>
</html>